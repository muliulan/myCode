package com.muliulan.mll.code.`31-60`

import java.util.*

/**
描述:
zhaochenshuo
2021/4/8
 */

class Main50 {

    /**已知一个长度为 n 的数组，预先按照升序排列，经由 1 到 n 次 旋转 后，得到输入数组。例如，原数组 nums = [0,1,2,4,5,6,7] 在变化后可能得到：
    若旋转 4 次，则可以得到 [4,5,6,7,0,1,2]
    若旋转 4 次，则可以得到 [0,1,2,4,5,6,7]
    注意，数组 [a[0], a[1], a[2], ..., a[n-1]] 旋转一次 的结果为数组 [a[n-1], a[0], a[1], a[2], ..., a[n-2]] 。

    给你一个元素值 互不相同 的数组 nums ，它原来是一个升序排列的数组，并按上述情形进行了多次旋转。请你找出并返回数组中的 最小元素 。

     
    示例 1：
    输入：nums = [3,4,5,1,2]
    输出：1
    解释：原数组为 [1,2,3,4,5] ，旋转 3 次得到输入数组。

    示例 2：
    输入：nums = [4,5,6,7,0,1,2]
    输出：0
    解释：原数组为 [0,1,2,4,5,6,7] ，旋转 4 次得到输入数组。

    示例 3：
    输入：nums = [11,13,15,17]
    输出：11
    解释：原数组为 [11,13,15,17] ，旋转 4 次得到输入数组。
     *
     * */
    fun aa(): Int {
        val nums: IntArray = intArrayOf(4, 5, 6, 7, 0, 1, 2)
        //方法1
//        Arrays.sort(nums)
        //方法2   二分查找
        var l = 0
        var r = nums.size - 1
        while (l < r) {
            val a = (l + r) / 2

            val ll = nums[l]
            val rr = nums[r]
            val aa = nums[a]

            /** @@@@ $&@@@
             *  $ 最小值
             *  & 指向到位置
             * */
            if (rr > aa) {
                r = a
            } else {
                /** @@$&@@ @@@
                 *  $ 最小值
                 *  & 指向到位置
                 * */
                l = a + 1
            }
        }
        return nums[l]
    }
}